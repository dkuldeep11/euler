package com.kd.euler.level1;

import java.util.ArrayList;
import java.util.List;

/**
 * Even Fibonacci numbers
 *
 * Problem 2
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 *
 * @Author Kuldeep Dhole
 */
public class EvenFibonacciNumbers {

    public static void main(String[] args) {

//        System.out.println(Arrays.toString(getFibonacciNumbers(4)));

        long start = System.currentTimeMillis();
        System.out.println("solution1 = " + solution1());
        long end = System.currentTimeMillis();
        long totalDuration = end - start;

        System.out.println("total time in millis = " + totalDuration);
    }

    private static int solution1() {
        List<Integer> fibonacciNumbers = new ArrayList<>();
        fibonacciNumbers.add(1);
        fibonacciNumbers.add(2);

        int i = 2;
        int latest = 2;
        int sum = 2;
        while (latest < 4000000) {
            latest = fibonacciNumbers.get(i-2) + fibonacciNumbers.get(i-1);
            fibonacciNumbers.add(latest);
            i++;

            if (latest%2 == 0)
                sum += latest;

        }
        return sum;
    }

    private static int[] getFibonacciNumbers(int n) {

        int first = 1, second = 2;

        if (n == 1)
            return new int[] {first};

        if (n == 2)
            return new int[] {first, second};

        List<Integer> fibonacciNumbers = new ArrayList<>();
        fibonacciNumbers.add(first);
        fibonacciNumbers.add(second);

        for (int i=n-2; i<n; i++) {
            fibonacciNumbers.add(fibonacciNumbers.get(i-2) + fibonacciNumbers.get(i-1));
        }

        return fibonacciNumbers.stream()
                .mapToInt(Integer::intValue)
                .toArray();
    }

}
